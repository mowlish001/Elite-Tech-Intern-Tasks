# -*- coding: utf-8 -*-
"""Untitled16.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19Y1VQNQVBMSJKOF8CHKQ58iwTp-T35Hb
"""

# Import required libraries
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn.linear_model import LogisticRegression
from sklearn.ensemble import RandomForestClassifier
from sklearn.svm import SVC
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix

# Load the dataset
df = pd.read_csv('/mnt/data/loan_approval_dataset.csv')

# Encode categorical variables
le = LabelEncoder()
df['education'] = le.fit_transform(df['education'])
df['self_employed'] = le.fit_transform(df['self_employed'])
df['loan_status'] = df['loan_status'].map({'Approved': 1, 'Rejected': 0})

# Check and fill missing values
df.fillna(df.median(numeric_only=True), inplace=True)

# Prepare features and labels
X = df.drop(['loan_id', 'loan_status'], axis=1)
y = df['loan_status']

# Scale the features
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# Split the data
X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42)

# Train Logistic Regression
lr = LogisticRegression()
lr.fit(X_train, y_train)
y_pred_lr = lr.predict(X_test)

# Train Random Forest
rf = RandomForestClassifier(random_state=42)
rf.fit(X_train, y_train)
y_pred_rf = rf.predict(X_test)

# Train Support Vector Machine
svm = SVC()
svm.fit(X_train, y_train)
y_pred_svm = svm.predict(X_test)

# Evaluate models
acc_lr = accuracy_score(y_test, y_pred_lr)
acc_rf = accuracy_score(y_test, y_pred_rf)
acc_svm = accuracy_score(y_test, y_pred_svm)

# Plot model comparison
plt.figure(figsize=(8, 5))
sns.barplot(x=['Logistic Regression', 'Random Forest', 'SVM'], y=[acc_lr, acc_rf, acc_svm])
plt.title('Model Accuracy Comparison')
plt.ylabel('Accuracy Score')
plt.ylim(0, 1)
plt.show()

# Show confusion matrix heatmaps
fig, axes = plt.subplots(1, 3, figsize=(18, 4))
sns.heatmap(confusion_matrix(y_test, y_pred_lr), annot=True, fmt='d', ax=axes[0], cmap='Blues')
axes[0].set_title('Logistic Regression')
sns.heatmap(confusion_matrix(y_test, y_pred_rf), annot=True, fmt='d', ax=axes[1], cmap='Greens')
axes[1].set_title('Random Forest')
sns.heatmap(confusion_matrix(y_test, y_pred_svm), annot=True, fmt='d', ax=axes[2], cmap='Oranges')
axes[2].set_title('SVM')
plt.show()

# Print classification reports
print("Logistic Regression:\n", classification_report(y_test, y_pred_lr))
print("Random Forest:\n", classification_report(y_test, y_pred_rf))
print("SVM:\n", classification_report(y_test, y_pred_svm))

# User interaction for prediction
def predict_loan_approval():
    user_input = {
        'no_of_dependents': int(input("No of Dependents: ")),
        'education': le.transform([input("Education (Graduate/Not Graduate): ")])[0],
        'self_employed': le.transform([input("Self Employed (Yes/No): ")])[0],
        'income_annum': float(input("Income (per annum): ")),
        'loan_amount': float(input("Loan Amount: ")),
        'loan_term': int(input("Loan Term (months): ")),
        'cibil_score': int(input("CIBIL Score: ")),
        'residential_assets_value': float(input("Residential Assets Value: ")),
        'commercial_assets_value': float(input("Commercial Assets Value: ")),
        'luxury_assets_value': float(input("Luxury Assets Value: ")),
        'bank_asset_value': float(input("Bank Asset Value: "))
    }
    df_input = pd.DataFrame([user_input])
    df_input_scaled = scaler.transform(df_input)
    prediction = rf.predict(df_input_scaled)
    print("Loan Status Prediction:", "Approved ✅" if prediction[0] == 1 else "Rejected ❌")

# Call user interaction function
# predict_loan_approval()  # Uncomment to test manually in notebook